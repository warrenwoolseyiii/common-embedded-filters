# Uncrustify-0.77.1_f
#
# uncrustify configuration for Flume_AMR
#
# INSTALLATION:
# See https://github.com/uncrustify/uncrustify
# Defaults: https://github.com/uncrustify/uncrustify/blob/master/etc/defaults.cfg
#
# USAGE:
# uncrustify -c .uncrustify-cfg -l CPP --replace --no-backup $(find . -name '*.h' -o -name '*.cpp')
#
# OPTIONS:
# uncrustify --show-config
# NOTE: Naming is not standardized. E.g. "cmt" vs  "comment", etc.
#

# NOTE:
# Option defaults in comments are surrounded by parentheses

#
# JRH: Most changed options at top
#

# How aggressively to remove extra newlines not in preprocessor.
#
# 0: No change (default)
# 1: Remove most newlines not handled by other config
# 2: Remove all newlines and reformat completely by config
# NOTE/JRH: set to 1 once, then set to 0
nl_remove_extra_newlines        = 0 # unsigned number (0)

# Whether to ignore the '#define' body while formatting.
# NOTE/JRH: may want to use selectively
pp_ignore_define_body           = false # true/(false)

# Disable formatting of NL_CONT ('\\n') ended lines (e.g. multi-line macros).
# NOTE/JRH: Use with pp_ignore_define_body = false to remove extra pp newlines
#disable_processing_nl_cont = true # true/(false)

# Whether to indent comments found in first column.
# NOTE/JRH: set to true when reworking comments
indent_col1_comment  = false  # true/(false)

# The number of newlines after '}' of a multi-line function body.
# NOTE/JRH: Set these to 2 once, then unset
nl_after_func_body          = 0 # (0)

# The number of newlines before a multi-line function definition. Where
# applicable, this option is overridden with eat_blanks_after_open_brace=true
# NOTE/JRH: Set these to 2 once, then unset
nl_before_func_body_def     = 0 # (0)

# 0: No reflowing (apart from the line wrapping due to cmt_width) (default)
# 1: No touching at all
# 2: Full reflow (enable cmt_indent_multi for indent with line wrapping due to cmt_width)
# NOTE/JRH: Set to 0 (or 2?) when reworking comments
cmt_reflow_mode = 1 # unsigned number (0)

# The span for aligning on '#define' bodies.
#
# =0: Don't align (default)
# >0: Number of lines (including comments) between blocks
# NOTE/JRH: We may want to inc/dec this on macro-heavy files first run
align_pp_define_span            = 2 # unsigned number (0)

# Add or remove braces on single-line 'while' statement.
# "while (a) a--;" vs "while (a) { a--; }"
# NOTE/JRH: Set force once, then ignore
mod_full_brace_while            = ignore # (ignore)/add/remove/force/not_defined

#
# General options
#

newlines         = LF # (AUTO), CRLF, CR, or LF
input_tab_size   = 4  # original tab size (8)
output_tab_size  = 4  # new tab size (8)

#
# Spacing options
#

# Add or remove space around preprocessor '##' concatenation operator.
sp_pp_concat                    = add # ignore/(add)/remove/force

# Add or remove space after preprocessor '#' stringify operator.
# Also affects the '#@' charizing operator.
sp_pp_stringify                 = ignore   # ignore/add/remove/force

# Add or remove space before preprocessor '#' stringify operator
# as in '#define x(y) L#y'.
sp_before_pp_stringify          = ignore   # ignore/add/remove/force

# Add or remove space around non-assignment symbolic operators ('+', '/', '%',
# '<<', and so forth).
sp_arith                = force # ignore/add/remove/force

# Add or remove space between '}' and 'else' if on the same line.
sp_brace_else           = add   # ignore/add/remove/force
sp_else_brace           = add   # ignore/add/remove/force

# Add or remove space between a macro name and its definition.
sp_macro                = ignore   # ignore/add/remove/force

# Add or remove space between a macro function ')' and its definition.
sp_macro_func           = ignore   # ignore/add/remove/force

# Type &var
sp_before_byref         = force
sp_after_byref          = remove
# Type& var
#sp_before_byref         = remove
#sp_after_byref          = force

# Add or remove space before ';'.
sp_before_semi          = remove   # ignore/add/remove/force [remove]
sp_paren_paren          = remove   # space between (( and ))
sp_return_paren         = remove   # "return (1);" vs "return(1);"
sp_sizeof_paren         = remove   # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen        = force   # "if (" vs "if("
sp_after_sparen         = force    # "if () {" vs "if (){"
sp_after_cast           = remove # "(int) a" vs "(int)a"
sp_inside_paren_cast    = remove
sp_inside_braces        = force  # "{ 1 }" vs "{1}"
sp_inside_braces_struct = force  # "{ 1 }" vs "{1}"
sp_inside_braces_enum   = force  # "{ 1 }" vs "{1}"
sp_inside_paren         = remove
sp_inside_for           = remove
sp_inside_fparens       = remove
sp_inside_fparen        = remove
sp_inside_sparen        = remove
sp_inside_square        = remove
sp_type_func            = remove
#sp_type_func            = ignore
sp_assign               = force
sp_enum_assign          = force
sp_arith                = force
sp_bool                 = force
sp_compare              = force
sp_after_comma          = force
sp_func_def_paren       = remove # "int foo (){" vs "int foo(){"
sp_func_call_paren      = remove # "foo (" vs "foo("
sp_func_proto_paren     = remove # "int foo ();" vs "int foo();"
sp_func_class_paren     = remove
sp_before_angle         = force
sp_after_angle          = force
sp_inside_angle         = remove
sp_sparen_brace         = add
sp_fparen_brace         = add

sp_after_ptr_star       = remove
sp_before_ptr_star      = force
sp_between_ptr_star     = remove

# If true, a <TAB> is inserted after #define.
force_tab_after_define          = false

#
# Indenting options
#

# The number of columns to indent per level. Usually 2, 3, 4, or 8.
indent_columns = output_tab_size # (8)

# How to use tabs when indenting code.
#
# 0: Spaces only
# 1: Indent with tabs to brace level, align with spaces (default)
# 2: Indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs = 0  # (1)=indent to level only, 2=indent with tabs [1]

# Whether to indent comments that are not at a brace level with tabs on a
# tabstop. Requires indent_with_tabs=2. If false, will use spaces.
indent_cmt_with_tabs = false # true/(false)

# Whether to indent strings broken by '\' so that they line up.
indent_align_string  = false  # true/(false)

# Spaces to indent '{' from level.
indent_brace = 0 # unsigned number (0)

# Whether the 'class' body is indented.
indent_class = true # true/(false)

# Spaces to indent single line ('//') comments on lines before code.
#indent_single_line_comments_before  = 1 # (0)

# Spaces to indent single line ('//') comments on lines after code.
#indent_single_line_comments_after   = 1 # (0)

# Whether to indent trailing single line ('//') comments relative to the code
# instead of trying to keep the same absolute column.
indent_relative_single_line_comments = true # true/(false)

# Spaces to indent 'case' from 'switch'. Usually 0 or indent_columns.
indent_switch_case = 4 # unsigned number (0)

# Whether to indent preprocessor statements inside of switch statements.
indent_switch_pp = true # (true)/false

# How to indent access specifiers that are followed by a colon.
#  >0: Absolute column where 1 is the leftmost column
# <=0: Subtract from brace indent
indent_access_spec = -2 # (1)

# How to indent goto labels. Requires indent_ignore_label=false.
#  >0: Absolute column where 1 is the leftmost column
# <=0: Subtract from brace indent
# indent_label = 0 # number (1)

#
# Newline adding and removing options
#

# Add or remove newline between a case ':' and '{'. Overrides nl_after_case.
nl_case_colon_brace         = remove # (ignore)/add/remove/force/not_defined

nl_start_of_file            = remove
#nl_start_of_file_min        = 0
nl_end_of_file              = force
nl_end_of_file_min          = 1
nl_max                      = 3
nl_before_block_comment     = 2

nl_assign_brace             = add  # "= {" vs "= \n {"
nl_enum_brace               = add  # "enum {" vs "enum \n {"
nl_union_brace              = add  # "union {" vs "union \n {"
nl_struct_brace             = add  # "struct {" vs "struct \n {"
#nl_do_brace                 = add  # "do {" vs "do \n {"
nl_if_brace                 = remove  # "if () {" vs "if () \n {"
#nl_for_brace                = add  # "for () {" vs "for () \n {"
nl_else_brace               = remove  # "else {" vs "else \n {"
#nl_while_brace              = add  # "while () {" vs "while () \n {"
nl_switch_brace             = remove  # "switch () {" vs "switch () \n {"
nl_var_def_blk_end_func_top = 1
nl_before_case              = false
nl_fcall_brace              = add  # "foo() {" vs "foo()\n{"
nl_fdef_brace               = add  # "int foo() {" vs "int foo()\n{"
nl_after_return             = false
nl_brace_while              = remove
nl_brace_else               = remove
nl_after_label_colon        = true

nl_enum_own_lines = force

# The number of newlines after '}' of a single line function body. Also
# affects class constructors/destructors.
#
# Overrides nl_after_func_body and nl_after_func_body_class.
# nl_after_func_body_one_liner    = 0        # unsigned number

# Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and
# '#endif'. Does not affect top-level #ifdefs.
nl_squeeze_ifdef                = false    # true/false
nl_squeeze_ifdef_top_level      = false

nl_multi_line_define = false

# Whether to alter newlines in '#define' macros.
nl_define_macro = false

# Add or remove newline between return type and function name in a prototype.
nl_func_proto_type_name         = ignore # (ignore)/add/remove/force

# Add or remove newline after '(' in a function declaration.
nl_func_decl_start              = ignore # (ignore)/add/remove/force

#
# Blank line options
#

# The maximum number of consecutive newlines (3 = 2 blank lines).
nl_max                          = 3 # unsigned number

# The maximum number of consecutive newlines in a function.
nl_max_blank_in_func            = 2 # unsigned number

# The number of newlines before a function prototype.
nl_before_func_body_proto       = 0 # unsigned number

# The number of newlines after a function prototype.
nl_after_func_proto             = 0 # unsigned number

# The number of newlines after a function prototype, if not followed by
# another function prototype.
nl_after_func_proto_group       = 0 # unsigned number

# Whether to remove blank lines before '}'.
eat_blanks_before_close_brace   = true # true/(false)

# Whether to remove blank lines after '{'.
eat_blanks_after_open_brace     = true # true/(false)

#
# Positioning options
#

# The position of Boolean operators in wrapped expressions.
pos_bool = trail # (ignore)/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force

#
# Line splitting options
#

# Try to limit code width to N columns.
code_width                      = 0 # unsigned number (0)

# Whether to fully split long 'for' statements at semi-colons.
ls_for_split_full               = false # true/(false)

# Whether to fully split long function prototypes/calls at commas.
# The option ls_code_width has priority over the option ls_func_split_full.
ls_func_split_full              = false # true/(false)

# Whether to split lines as close to code_width as possible and ignore some
# groupings.
# The option ls_code_width has priority over the option ls_func_split_full.
ls_code_width                   = false # true/(false)


#
# Code alignment options (not left column spaces/tabs)
#

# Whether to use tabs for aligning.
align_with_tabs        = false # true/(false)

# Whether to bump out to the next tab when aligning.
align_on_tabstop       = false # true/(false)

# The span for aligning on '=' in enums.
align_enum_equ_span    = 4 # unsigned number (0 == dont align)

# Whether to align macros wrapped with a backslash and a newline. This will
# not work right if the macro contains a multi-line comment.
align_nl_cont                   = true # true/(false)

# Whether to align macro functions and variables together.
align_pp_define_together        = true # true/(false)

# The minimum space between label and value of a preprocessor define.
align_pp_define_gap             = 0 # unsigned number (0)

# The span for aligning variable definitions.
align_var_def_span     = 1 # (0 == dont align)

align_var_def_thresh   = 12
align_var_def_inline   = true
align_var_def_colon    = true

# The span for aligning on '=' in assignments.
# 0: Don't align (default).
align_assign_span      = 0 # (0)
align_assign_thresh    = 12
align_struct_init_span = 3
align_var_struct_span  = 1
align_number_right     = true
align_typedef_span     = 5
align_typedef_gap      = 3

# The span for aligning function prototypes.
align_func_proto_span = 1 # (0 == dont align)

align_var_class_span = 1 # (0 == dont align)

#
# Comment modification options
#

# Add or remove space after the opening of a C++ comment, i.e. '// A' vs. '//A'.
# NOTE/JRH: If we want to normalize comments we must force this at least once.
# The downside is that this causes commented code blocks lose indentation
sp_cmt_cpp_start     = ignore # (ignore)/add/remove/force

# Add or remove space before a trailing or embedded comment.
sp_before_tr_cmt     = force # (ignore)/add/remove/force

# Number of spaces before a trailing or embedded comment.
sp_num_before_tr_cmt = 1 # unsigned number (0)

align_right_cmt_span = 3
cmt_star_cont        = false
cmt_sp_before_star_cont = 1

# Whether to apply changes to multi-line comments, including cmt_width,
# keyword substitution and leading chars.
cmt_convert_tab_to_spaces = true # true/(false)

# Whether to group c-comments that look like they are in a block.
cmt_c_group = true # true/(false)

# Whether to change cpp-comments into c-comments.
cmt_cpp_to_c = false # true/(false)

# Whether to group cpp-comments that look like they are in a block. Only
# meaningful if cmt_cpp_to_c=true.
cmt_cpp_group = false # true/(false)

# If an #ifdef body exceeds the specified number of newlines and doesn't have
# a comment after the #endif, a comment will be added.
mod_add_long_ifdef_endif_comment = 5 # unsigned number (0)

# Whether to align macros wrapped with a backslash and a newline. This will
# not work right if the macro contains a multi-line comment.
align_nl_cont = false

#
# Code modifying options (non-whitespace)
#

# Add or remove braces on a single-line 'do' statement.
# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_do               = force # (ignore)/add/remove/force/not_defined

# Add or remove braces on a single-line 'for' statement.
# "for () a--;" vs "for () { a--; }"
mod_full_brace_for              = force # (ignore)/add/remove/force/not_defined

# Add or remove braces on a single-line 'if' statement. Braces will not be
# removed if the braced statement contains an 'else'.
# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_if               = force # (ignore)/add/remove/force/not_defined

# Add or remove unnecessary parenthesis on 'return' statement.
mod_paren_on_return             = remove # (ignore)/add/remove/force/not_defined

# Whether to fully parenthesize Boolean expressions in 'while' and 'if'
# statement, as in 'if (a && b > c)' => 'if (a && (b > c))'.
#mod_full_paren_if_bool = true # true/(false)

# Add or remove braces around a fully braced case statement. Will only remove
# braces if there are no variable declarations in the block.
#mod_case_brace                  = force # (ignore)/add/remove/force/not_defined

#
# Preprocessor options
#

# How to use tabs when indenting preprocessor code.
pp_indent_with_tabs             = -1 # number (-1 == Use 'indent_with_tabs' setting)

# Add or remove indentation of preprocessor directives inside #if blocks
# at brace level 0 (file-level).
pp_indent                       = remove # (ignore)/add/remove/force

# Whether to indent #if/#else/#endif at the brace level. If false, these are
# indented from column 1.
pp_indent_at_level              = true # true/(false)

# Specifies the number of columns to indent preprocessors per level
# at brace level 0 (file-level). If pp_indent_at_level=false, also specifies
# the number of columns to indent preprocessors per level
# at brace level > 0 (function-level).
#
# Default: 1
pp_indent_count                 = 0        # unsigned number

# Add or remove space after # based on pp_level of #if blocks.
pp_space_after                  = ignore   # ignore/add/remove/force

# Sets the number of spaces per level added with pp_space.
pp_space_count                  = 0        # unsigned number

# The indent for '#region' and '#endregion' in C# and '#pragma region' in
# C/C++. Negative values decrease indent down to the first column.
pp_indent_region                = 0        # number

# Whether to indent the code between #region and #endregion.
pp_region_indent_code           = false    # true/false

# If pp_indent_at_level=true, sets the indent for #if, #else and #endif when
# not at file-level. Negative values decrease indent down to the first column.
#
# =0: Indent preprocessors using output_tab_size
# >0: Column at which all preprocessors will be indented
pp_indent_if                    = 1 # number

# Whether to indent the code between #if, #else and #endif.
pp_if_indent_code               = false # true/(false)

# Whether to indent '#define' at the brace level. If false, these are
# indented from column 1.
pp_define_at_level              = false # true/(false)

# An offset value that controls the indentation of the body of a multiline #define.
# 'body' refers to all the lines of a multiline #define except the first line.
pp_multiline_define_body_indent = 8 # number (8)

# Whether to indent case statements between #if, #else, and #endif.
# Only applies to the indent of the preprocesser that the case statements
# directly inside of.
pp_indent_case                  = true # (true)/false

# Whether to indent whole function definitions between #if, #else, and #endif.
# Only applies to the indent of the preprocesser that the function definition
# is directly inside of.
pp_indent_func_def              = true # (true)/false

# Whether to indent extern C blocks between #if, #else, and #endif.
# Only applies to the indent of the preprocesser that the extern block is
# directly inside of.
pp_indent_extern                = true # (true)/false

# How to indent braces directly inside #if, #else, and #endif. Requires
# pp_if_indent_code=true and only applies to the indent of the preprocesser that
# the braces are directly inside of.
pp_indent_brace                 = 1 # unsigned number (1)